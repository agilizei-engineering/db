-- =====================================================
-- EXPANS√ÉO DO SCHEMA AUX - FUN√á√ïES GEN√âRICAS DE TRIGGER
-- =====================================================
-- Script para expandir o schema aux com fun√ß√µes gen√©ricas
-- que ser√£o usadas pelos schemas espec√≠ficos
-- Autor: Assistente IA + Usu√°rio
-- Data: 2025-01-27
-- Vers√£o: 1.0

-- =====================================================
-- VERIFICA√á√ÉO DE PR√â-REQUISITOS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE 'üîç Verificando pr√©-requisitos para expans√£o do schema aux...';
    
    -- Verificar se o schema aux existe
    IF NOT EXISTS (SELECT 1 FROM information_schema.schemata WHERE schema_name = 'aux') THEN
        RAISE EXCEPTION 'Schema aux n√£o encontrado. Execute primeiro: \i aux_schema.sql';
    END IF;
    
    -- Verificar se as fun√ß√µes de valida√ß√£o existem
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_and_validate_cnpj') THEN
        RAISE EXCEPTION 'Fun√ß√£o aux.clean_and_validate_cnpj n√£o encontrada';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_and_validate_cpf') THEN
        RAISE EXCEPTION 'Fun√ß√£o aux.clean_and_validate_cpf n√£o encontrada';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_and_validate_postal_code') THEN
        RAISE EXCEPTION 'Fun√ß√£o aux.clean_and_validate_postal_code n√£o encontrada';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'validate_email') THEN
        RAISE EXCEPTION 'Fun√ß√£o aux.validate_email n√£o encontrada';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'validate_url') THEN
        RAISE EXCEPTION 'Fun√ß√£o aux.validate_url n√£o encontrada';
    END IF;
    
    RAISE NOTICE '‚úÖ Todos os pr√©-requisitos atendidos!';
END $$;

-- =====================================================
-- FUN√á√ïES GEN√âRICAS DE TRIGGER PARA CNPJ
-- =====================================================

-- Fun√ß√£o gen√©rica para limpar e validar CNPJ
CREATE OR REPLACE FUNCTION aux.clean_cnpj_before_insert_update()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Usar fun√ß√£o de valida√ß√£o do schema aux
    NEW.cnpj := aux.clean_and_validate_cnpj(NEW.cnpj);
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION aux.clean_cnpj_before_insert_update() IS 'Fun√ß√£o gen√©rica de trigger para limpar e validar CNPJ automaticamente';

-- =====================================================
-- FUN√á√ïES GEN√âRICAS DE TRIGGER PARA CPF
-- =====================================================

-- Fun√ß√£o gen√©rica para limpar e validar CPF
CREATE OR REPLACE FUNCTION aux.clean_cpf_before_insert_update()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Usar fun√ß√£o de valida√ß√£o do schema aux
    NEW.cpf := aux.clean_and_validate_cpf(NEW.cpf);
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION aux.clean_cpf_before_insert_update() IS 'Fun√ß√£o gen√©rica de trigger para limpar e validar CPF automaticamente';

-- =====================================================
-- FUN√á√ïES GEN√âRICAS DE TRIGGER PARA CEP
-- =====================================================

-- Fun√ß√£o gen√©rica para limpar e validar CEP
CREATE OR REPLACE FUNCTION aux.clean_postal_code_before_insert_update()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Usar fun√ß√£o de valida√ß√£o do schema aux
    NEW.postal_code := aux.clean_and_validate_postal_code(NEW.postal_code);
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION aux.clean_postal_code_before_insert_update() IS 'Fun√ß√£o gen√©rica de trigger para limpar e validar CEP automaticamente';

-- =====================================================
-- FUN√á√ïES GEN√âRICAS DE TRIGGER PARA EMAIL
-- =====================================================

-- Fun√ß√£o gen√©rica para validar email
CREATE OR REPLACE FUNCTION aux.validate_email_before_insert_update()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Usar fun√ß√£o de valida√ß√£o do schema aux
    IF NEW.email IS NOT NULL THEN
        IF NOT aux.validate_email(NEW.email) THEN
            RAISE EXCEPTION 'Email inv√°lido: %', NEW.email;
        END IF;
    END IF;
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION aux.validate_email_before_insert_update() IS 'Fun√ß√£o gen√©rica de trigger para validar email automaticamente';

-- =====================================================
-- FUN√á√ïES GEN√âRICAS DE TRIGGER PARA URL
-- =====================================================

-- Fun√ß√£o gen√©rica para validar URL
CREATE OR REPLACE FUNCTION aux.validate_url_before_insert_update()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Usar fun√ß√£o de valida√ß√£o do schema aux
    IF NEW.photo_url IS NOT NULL THEN
        IF NOT aux.validate_url(NEW.photo_url) THEN
            RAISE EXCEPTION 'URL inv√°lida: %', NEW.photo_url;
        END IF;
    END IF;
    RETURN NEW;
END;
$$;

COMMENT ON FUNCTION aux.validate_url_before_insert_update() IS 'Fun√ß√£o gen√©rica de trigger para validar URL automaticamente';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TRIGGER DE CNPJ
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_cnpj_trigger(
    p_schema_name text,
    p_table_name text,
    p_column_name text DEFAULT 'cnpj'
)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    v_trigger_name text;
    v_full_table_name text;
    v_sql text;
BEGIN
    -- Nome do trigger
    v_trigger_name := 'clean_cnpj_trigger';
    v_full_table_name := p_schema_name || '.' || p_table_name;
    
    -- Criar trigger
    v_sql := format('
        DROP TRIGGER IF EXISTS %I ON %I;
        CREATE TRIGGER %I
            BEFORE INSERT OR UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION aux.clean_cnpj_before_insert_update();
    ', v_trigger_name, v_full_table_name, v_trigger_name, v_full_table_name);
    
    EXECUTE v_sql;
    
    RETURN 'Trigger ' || v_trigger_name || ' criado com sucesso para ' || v_full_table_name;
END;
$$;

COMMENT ON FUNCTION aux.create_cnpj_trigger(text, text, text) IS 'Fun√ß√£o gen√©rica para criar trigger de limpeza de CNPJ';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TRIGGER DE CPF
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_cpf_trigger(
    p_schema_name text,
    p_table_name text,
    p_column_name text DEFAULT 'cpf'
)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    v_trigger_name text;
    v_full_table_name text;
    v_sql text;
BEGIN
    -- Nome do trigger
    v_trigger_name := 'clean_cpf_trigger';
    v_full_table_name := p_schema_name || '.' || p_table_name;
    
    -- Criar trigger
    v_sql := format('
        DROP TRIGGER IF EXISTS %I ON %I;
        CREATE TRIGGER %I
            BEFORE INSERT OR UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION aux.clean_cpf_before_insert_update();
    ', v_trigger_name, v_full_table_name, v_trigger_name, v_full_table_name);
    
    EXECUTE v_sql;
    
    RETURN 'Trigger ' || v_trigger_name || ' criado com sucesso para ' || v_full_table_name;
END;
$$;

COMMENT ON FUNCTION aux.create_cpf_trigger(text, text, text) IS 'Fun√ß√£o gen√©rica para criar trigger de limpeza de CPF';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TRIGGER DE CEP
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_postal_code_trigger(
    p_schema_name text,
    p_table_name text,
    p_column_name text DEFAULT 'postal_code'
)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    v_trigger_name text;
    v_full_table_name text;
    v_sql text;
BEGIN
    -- Nome do trigger
    v_trigger_name := 'clean_postal_code_trigger';
    v_full_table_name := p_schema_name || '.' || p_table_name;
    
    -- Criar trigger
    v_sql := format('
        DROP TRIGGER IF EXISTS %I ON %I;
        CREATE TRIGGER %I
            BEFORE INSERT OR UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION aux.clean_postal_code_before_insert_update();
    ', v_trigger_name, v_full_table_name, v_trigger_name, v_full_table_name);
    
    EXECUTE v_sql;
    
    RETURN 'Trigger ' || v_trigger_name || ' criado com sucesso para ' || v_full_table_name;
END;
$$;

COMMENT ON FUNCTION aux.create_postal_code_trigger(text, text, text) IS 'Fun√ß√£o gen√©rica para criar trigger de limpeza de CEP';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TRIGGER DE EMAIL
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_email_trigger(
    p_schema_name text,
    p_table_name text,
    p_column_name text DEFAULT 'email'
)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    v_trigger_name text;
    v_full_table_name text;
    v_sql text;
BEGIN
    -- Nome do trigger
    v_trigger_name := 'validate_email_trigger';
    v_full_table_name := p_schema_name || '.' || p_table_name;
    
    -- Criar trigger
    v_sql := format('
        DROP TRIGGER IF EXISTS %I ON %I;
        CREATE TRIGGER %I
            BEFORE INSERT OR UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION aux.validate_email_before_insert_update();
    ', v_trigger_name, v_full_table_name, v_trigger_name, v_full_table_name);
    
    EXECUTE v_sql;
    
    RETURN 'Trigger ' || v_trigger_name || ' criado com sucesso para ' || v_full_table_name;
END;
$$;

COMMENT ON FUNCTION aux.create_email_trigger(text, text, text) IS 'Fun√ß√£o gen√©rica para criar trigger de valida√ß√£o de email';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TRIGGER DE URL
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_url_trigger(
    p_schema_name text,
    p_table_name text,
    p_column_name text DEFAULT 'photo_url'
)
RETURNS text
LANGUAGE plpgsql
AS $$
DECLARE
    v_trigger_name text;
    v_full_table_name text;
    v_sql text;
BEGIN
    -- Nome do trigger
    v_trigger_name := 'validate_url_trigger';
    v_full_table_name := p_schema_name || '.' || p_table_name;
    
    -- Criar trigger
    v_sql := format('
        DROP TRIGGER IF EXISTS %I ON %I;
        CREATE TRIGGER %I
            BEFORE INSERT OR UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION aux.validate_url_before_insert_update();
    ', v_trigger_name, v_full_table_name, v_trigger_name, v_full_table_name);
    
    EXECUTE v_sql;
    
    RETURN 'Trigger ' || v_trigger_name || ' criado com sucesso para ' || v_full_table_name;
END;
$$;

COMMENT ON FUNCTION aux.create_url_trigger(text, text, text) IS 'Fun√ß√£o gen√©rica para criar trigger de valida√ß√£o de URL';

-- =====================================================
-- FUN√á√ÉO GEN√âRICA PARA CRIAR TODOS OS TRIGGERS DE UMA TABELA
-- =====================================================

CREATE OR REPLACE FUNCTION aux.create_validation_triggers(
    p_schema_name text,
    p_table_name text,
    p_columns text[] DEFAULT ARRAY[]::text[]
)
RETURNS text[]
LANGUAGE plpgsql
AS $$
DECLARE
    v_result text[];
    v_column text;
    v_message text;
BEGIN
    v_result := ARRAY[]::text[];
    
    -- Se n√£o especificou colunas, usar padr√µes baseados no nome da tabela
    IF array_length(p_columns, 1) IS NULL THEN
        -- Detectar automaticamente colunas baseado no nome da tabela
        IF p_table_name LIKE '%business%' OR p_table_name LIKE '%establishment%' THEN
            p_columns := ARRAY['cnpj'];
        ELSIF p_table_name LIKE '%employee%' OR p_table_name LIKE '%person%' THEN
            p_columns := ARRAY['cpf'];
        ELSIF p_table_name LIKE '%address%' THEN
            p_columns := ARRAY['postal_code'];
        END IF;
    END IF;
    
    -- Criar triggers para cada coluna
    FOREACH v_column IN ARRAY p_columns
    LOOP
        BEGIN
            CASE v_column
                WHEN 'cnpj' THEN
                    v_message := aux.create_cnpj_trigger(p_schema_name, p_table_name, v_column);
                WHEN 'cpf' THEN
                    v_message := aux.create_cpf_trigger(p_schema_name, p_table_name, v_column);
                WHEN 'postal_code' THEN
                    v_message := aux.create_postal_code_trigger(p_schema_name, p_table_name, v_column);
                WHEN 'email' THEN
                    v_message := aux.create_email_trigger(p_schema_name, p_table_name, v_column);
                WHEN 'photo_url' THEN
                    v_message := aux.create_url_trigger(p_schema_name, p_table_name, v_column);
                ELSE
                    v_message := 'Coluna ' || v_column || ' n√£o suportada para valida√ß√£o autom√°tica';
            END CASE;
            
            v_result := array_append(v_result, v_message);
        EXCEPTION
            WHEN OTHERS THEN
                v_result := array_append(v_result, 'Erro ao criar trigger para ' || v_column || ': ' || SQLERRM);
        END;
    END LOOP;
    
    RETURN v_result;
END;
$$;

COMMENT ON FUNCTION aux.create_validation_triggers(text, text, text[]) IS 'Fun√ß√£o gen√©rica para criar todos os triggers de valida√ß√£o de uma tabela';

-- =====================================================
-- VERIFICA√á√ÉO DE FUN√á√ïES CRIADAS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE 'üîç Verificando fun√ß√µes criadas no schema aux...';
    
    -- Verificar fun√ß√µes de trigger
    IF EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_cnpj_before_insert_update') THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o aux.clean_cnpj_before_insert_update criada';
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o aux.clean_cnpj_before_insert_update n√£o foi criada';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_cpf_before_insert_update') THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o aux.clean_cpf_before_insert_update criada';
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o aux.clean_cpf_before_insert_update n√£o foi criada';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'clean_postal_code_before_insert_update') THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o aux.clean_postal_code_before_insert_update criada';
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o aux.clean_postal_code_before_insert_update n√£o foi criada';
    END IF;
    
    -- Verificar fun√ß√µes de cria√ß√£o de triggers
    IF EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'create_cnpj_trigger') THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o aux.create_cnpj_trigger criada';
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o aux.create_cnpj_trigger n√£o foi criada';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_schema = 'aux' AND routine_name = 'create_validation_triggers') THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o aux.create_validation_triggers criada';
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o aux.create_validation_triggers n√£o foi criada';
    END IF;
    
    RAISE NOTICE 'üéØ Expans√£o do schema aux conclu√≠da com sucesso!';
END $$;

-- =====================================================
-- TESTE DE FUNCIONALIDADE
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE 'üß™ Testando funcionalidades criadas...';
    
    -- Testar se as fun√ß√µes est√£o funcionando
    BEGIN
        DECLARE
            cnpj_teste text;
            cpf_teste text;
            cep_teste text;
        BEGIN
            -- Testar valida√ß√£o de CNPJ
            cnpj_teste := aux.clean_and_validate_cnpj('11.222.333/0001-81');
            RAISE NOTICE '‚úÖ Valida√ß√£o de CNPJ funcionando: %', cnpj_teste;
            
            -- Testar valida√ß√£o de CPF
            cpf_teste := aux.clean_and_validate_cpf('123.456.789-09');
            RAISE NOTICE '‚úÖ Valida√ß√£o de CPF funcionando: %', cpf_teste;
            
            -- Testar valida√ß√£o de CEP
            cep_teste := aux.clean_and_validate_postal_code('12345-678');
            RAISE NOTICE '‚úÖ Valida√ß√£o de CEP funcionando: %', cep_teste;
            
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE '‚ùå Erro ao testar valida√ß√µes: %', SQLERRM;
        END;
    END;
    
    RAISE NOTICE 'üéØ Testes de funcionalidade conclu√≠dos!';
END $$;

-- =====================================================
-- RESUMO DA EXPANS√ÉO
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ =====================================================';
    RAISE NOTICE 'üéØ EXPANS√ÉO DO SCHEMA AUX - FUN√á√ïES GEN√âRICAS';
    RAISE NOTICE 'üéØ =====================================================';
    RAISE NOTICE '‚úÖ Fun√ß√µes de trigger gen√©ricas criadas';
    RAISE NOTICE '‚úÖ Fun√ß√µes de cria√ß√£o de triggers criadas';
    RAISE NOTICE '‚úÖ Fun√ß√£o de cria√ß√£o autom√°tica de triggers criada';
    RAISE NOTICE '‚úÖ Nomenclatura existente mantida';
    RAISE NOTICE '‚úÖ Compatibilidade preservada';
    RAISE NOTICE 'üéØ Schema aux expandido com sucesso!';
    RAISE NOTICE '=====================================================';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã PR√ìXIMOS PASSOS:';
    RAISE NOTICE '1. Migrar establishments_extension para usar aux.*';
    RAISE NOTICE '2. Verificar employees_extension est√° 100% limpo';
    RAISE NOTICE '3. Migrar quotation_schema se necess√°rio';
    RAISE NOTICE '4. Limpeza final de fun√ß√µes duplicadas';
    RAISE NOTICE '=====================================================';
END $$;
